## Vectors
numeric_V <- [1:3]
[1:3]
## Vectors
numeric_V <- 1:3
numeric_V
class(numeric_V)
## Vectors
numeric_V <- as.numeric(1:3)
character_V <- c("a","b","c")
boolean_V <- c(TRUE, FALSE, TRUE)
poker_vector <- c(140, -50, 20, -120, 240)
poker_V <- c(140, -50, 20, -120, 240)
roulette_V <- c(-24, -50, 100, 350, 10)
poker_V <- c(140, -50, 20, -120, 240)
weekday_V <- c("Monday","Tuesday","Wednesday",
"Thursday","Friday")
names(poker_V) <- weekday_V
names(roulette_V) <- weekday_V
poker_V
roulette_V
## Total Vector
total_daily <- roulette_V + poker_V
total_daily
total_poker <- sum(poker_V)
total_poker
total_roulette <- sum(roulette_V)
total_week <- total_poker + total_roulette
total_week
## Logical operator, which game was better?
total_poker > total_roulette
poker_wednesday <- poker_V[3]
poker_midweek <- poker_V[2:4]
roulette_TtoF <- roulette_V[2:5]
poker_start <- poker_V[1:3]
# calculate average:
mean(poker_start)
poker_goodDays <- poker_V > 0
poker_goodDays
poker_goodDays_names <- poker_V[poker_goodDays]
poker_goodDays_names
## Winning Roulette Days
roulette_goodDays <- roulette_V > 0
roulette_goodDays
## Vectors, types
numeric_V <- as.numeric(1:3)
character_V <- c("a","b","c")
boolean_V <- c(TRUE, FALSE, TRUE)
## Vectors, example
poker_V <- c(140, -50, 20, -120, 240)
roulette_V <- c(-24, -50, 100, -350, 10)
weekday_V <- c("Monday","Tuesday","Wednesday",
"Thursday","Friday")
## Assign names to Vectors
names(poker_V) <- weekday_V
names(roulette_V) <- weekday_V
## Total Vectors
total_daily <- roulette_V + poker_V
total_daily
total_poker <- sum(poker_V)
total_roulette <- sum(roulette_V)
total_week <- total_poker + total_roulette
total_week
## Logical operator, which game was better?
total_poker > total_roulette
#answer: FALSE, so roulette was better
## Smaller Vectors
poker_wednesday <- poker_V[3]
poker_midweek <- poker_V[2:4]
roulette_TtoF <- roulette_V[2:5]
poker_start <- poker_V[1:3]
# calculate average:
mean(poker_start)
## Winning Poker Days
poker_goodDays <- poker_V > 0
poker_goodDays
# the two lines below are EQUIVALENT:
poker_goodDays_names <- poker_V[poker_goodDays]
poker_goodDays_names <- poker_V[poker_V > 0]
# line above: an example of filtering using Base R,
# "within poker_V, I want where the numeric
# values in the Vector are greater than 0"
## Winning Roulette Days
roulette_goodDays <- roulette_V > 0
roulette_goodDays
roulette_goodDays_names <- roulette_V[roulette_goodDays]
roulette_goodDays_names
matrix(1:9, byrow = TRUE, nrow = 3)
matrix(1:9, bycol = TRUE, nrow = 3)
matrix(1:9, byrow = FALSE, nrow = 3)
?matrix()
#Default of byrow = FALSE (surprised me)
matrix(1:9, nrow = 3)
#Default of byrow = FALSE (surprised me, thought it
#would be byrow = TRUE...)
matrix(1:9, byrow = TRUE nrow = 3)
#Default of byrow = FALSE (surprised me, thought it
#would be byrow = TRUE...)
matrix(1:9, byrow = TRUE, nrow = 3)
#Star Wars fun:
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475,247.900)
#Star Wars fun:
new_hope <- c(460.998, 314.4)
return_jedi <- c(309.306,165.8)
box_office <- c(new_hope,empire_strikes,return_jedi)
box_office
star_wars_matrix <- matrix(box_office, byrow = TRUE,
ncol = 2)
star_wars_matrix
rownames(star_wars_matrix) <- c("new_hope","empire_strikes",
"return_jedi")
star_wars_matrix
colnames(star_wars_matrix) <- c("US","non-US")
star_wars_matrix
# names the matrix rows/columns (version 2, create separate Vectors first)
titles <- c("new_hope","empire_strikes",
"return_jedi")
regions <- c("US","non-US")
rownames(star_wars_matrix) <- titles
star_wars_matrix
colnames(star_wars_matrix) <- regions
star_wars_matrix
worldwide_vector <- rowSums(star_wars_matrix)
worldwide_vector
total_moolah <- sum(star_wars_matrix)
total_moolah
# Constructing the matrix: ALTERNATE
star_wars_matrix <- matrix(box_office, byrow = TRUE, ncol = 2,
dimnames = list(c("A New Hope", "The Empire Strikes Back",
"Return of the Jedi"),
c("US","non-US")))
star_wars_matrix
# Constructing the matrix: ALTERNATE
star_wars_matrix <- matrix(box_office, byrow = FALSE, ncol = 2,
dimnames = list(c("A New Hope", "The Empire Strikes Back",
"Return of the Jedi"),
c("US","non-US")))
star_wars_matrix
worldwide_vector <- rowSums(star_wars_matrix)
#cbind the totals and include in a brand new all_wars_matrix:
all_wars_matrix <- cbind(star_wars_matrix,worldwide_vector)
all_wars_matrix
#rename worldwide_vector column to "Global"
colnames(all_wars_matrix$worldwide_vector) <- "Global"
#rename worldwide_vector column to "Global"
colnames(all_wars_matrix) <- c("US","non-US","Global")
all_wars_matrix
## create prequel matrix, then rbind to all_wars_matrix
Phantom <- c(747.5,552.5)
Clones <- c(310.7,338.7)
Sith <- c(380.3,468.5)
prequel_matrix <- matrix(c(Phantom,Clones,Sith),
byrow = TRUE, ncol = 2,
dimnames = list(c("The Phantom Menace","Attack of the Clones",
"Revenge of the Sith"),
c("US","non-US")))
prequel_matrix
Global <- rowSums(prequel_matrix)
prequel_matrix <- cbind(prequel_matrix,Global)
prequel_matrix
all_wars_matrix
prequel_matrix
#let's rbind em
all_wars_matrix <- rbind(all_wars_matrix,prequel_matrix)
all_wars_matrix
Revenue_Totals <- colSums(all_wars_matrix)
Revenue_Totals
all_wars_matrix <- rbind(all_wars_matrix,Revenue_Totals)
all_wars_matrix
# reverse the above process to keep Revenue_Totals separate
#from the all_wars_matrix
all_wars_matrix <- all_wars_matrix[1:6,:]
# reverse the above process to keep Revenue_Totals separate
#from the all_wars_matrix
all_wars_matrix <- all_wars_matrix[1:6,1:3]
all_wars_matrix
# reverse the above process to keep Revenue_Totals separate
#from the all_wars_matrix
all_wars_matrix <- all_wars_matrix[1:6,]
all_wars_matrix
## select non-US column
non_US <- all_wars_matrix[ , 2]
non_US
mean_non_US <- mean(non_US)
mean_non_US
non_US_1and2 <- all_wars_matrix[1:2, 2]
mean_non_US_1and2 <- mean(non_US_1and2)
## estimate Visitors (about $5 per ticket)
visitors <- all_wars_matrix / 5
visitors
# actual ticket prices:
ticket_prices_matrix <- all_wars_matrix
# actual ticket prices:
# first I will make an exact copy of all_wars_matrix,
# then, manually replace all values
US_ticket_prices <- c(5,6,7,4,4.5,4.9)
non_US_ticket_prices <- US_ticket_prices
Global_ticket_prices <- US_ticket_prices
ticket_prices_matrix <- rbind(US_ticket_prices, non_US_ticket_prices,
Global_ticket_prices)
ticket_prices_matrix
all_tickets_vector <- c(US_ticket_prices,non_US_ticket_prices,Global_ticket_prices)
all_tickets_vector
ticket_prices_matrix <- matrix(all_tickets_vector, byrow = FALSE, ncol = 3)
ticket_prices_matrix
visitors <- all_wars_matrix / ticket_prices_matrix
visitors
visitors_US <- visitors[,1]
visitors_US
mean_US_visitors <- mean(visitors_US)
mean_US_visitors
#final Matrix practice
time <- c("day","night")
Elise <- c("smokin","Proverbs 31")
?rep()
She_IS <- matrix(rep(TRUE,times = 4), byrow = TRUE, nrow = 2)
She_IS
She_IS <- matrix(rep(TRUE,times = 4), byrow = TRUE, nrow = 2,
dimnames = list(time,Elise))
She_IS
## ------- Factors!! ----------- ##
theory <- "factors for categorical variables"
theory
sex_vector <- c("Male", "Female", "Female", "Male", "Male")
sex_vector
# convert sex_vector to a factor
factor(sex_vector)
# convert sex_vector to a factor
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
## animals:
animals_vector <- c("Elephant","Giraffe","Donkey","Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
## temperature to introduce ORDERED Levels in Factors:
temp_vector <- c("High","Low","High","Low","Medium")
factor_temp_vector <- factor(temp_vector, order = TRUE,
levels = c("Low","Medium","High"))
factor_temp_vector
## new exercise, building a survey vector:
survey_vector <- c("M","F","F","M","M")
survey_vector
factor_survey_vector <- factor(survey_vector)
factor_survey_vector
# now I can manually specify the Levels, instead of being
# F and M, they will be Female and Male
levels(factor_survey_vector) <- c("Female","Male")
factor_survey_vector
# above: in one fell swoop I can rename every character datapoint in a vector
# or dataframe column by simply renaming the Levels.
levels(factor_survey_vector) <- c("Poop","Fart")
factor_survey_vector
# now I can manually specify the Levels, instead of being
# F and M, they will be Female and Male
levels(factor_survey_vector) <- c("Female","Male")
factor_survey_vector
## compare the summaries, do Factors make a difference?
summary(survey_vector)
summary(factor_survey_vector)
## battle of the sexes
factor_survey_vector[1]
male <- factor_survey_vector[2]
male
male <- factor_survey_vector[1]
male
factor_survey_vector[2]
female <- factor_survey_vector[2]
female
male > female
male > female
length(male) > (length)female
length(male) > length(female)
length(male) < length(female)
summary(factor_survey_vector)
rm(male)
rm(female)
## battle of the sexes
factor_survey_vector["male"]
## battle of the sexes
factor_survey_vector[factor_survey_vector["male"]]
## battle of the sexes
factor_survey_vector[factor_survey_vector[1]]
rm(male)
rm(female)
male > female
factor_survey_vector[1]
male <- factor_survey_vector[1]
male
factor_survey_vector[2]
female <- factor_survey_vector[2]
female
male > female
speed <- c("medium","slow","slow","medium","fast")
speed
# create factor_speed_vector
factor_speed_vector <- factor(speed, ordered = TRUE,
levels = c("slow","medium","fast"))
factor_speed_vector
time <- c("day","night")
Elise <- c("smokin","Proverbs 31")
She_IS <- matrix(rep(TRUE,times = 4), byrow = TRUE, nrow = 2,
dimnames = list(time,Elise))
She_IS
She_IS
head(Salaries)
head(Teams)
## Join Salaries to Teams
Sal_Teams <- Salaries %>%
left_join(Teams, by = c("yearID","teamID","lgID")) %>%
transmute(yearID, teamID, lgID, salary,
WinPct = round(W/G,3), G, W, L, WCWin, DivWin,
LgWin, WSWin, name, park)
Payrolls <- Sal_Teams %>%
group_by(yearID, lgID, teamID, WinPct, G, W, L, WCWin,
DivWin, LgWin, WSWin, name, park) %>%
summarize(payroll = round(sum(salary/1000000),2))
## Create base plot ##
Pay4Gold_plot <- ggplot(Payrolls, aes(yearID, payroll)) +
##geom_point(shape = 18) +
labs(title = "MLB Payrolls", x = "Season",
y = "Payroll in Millions") +
geom_point(data = Payrolls %>%
filter(WSWin == "Y"), color = "blue")
## create pay variable
low_Pay <- Payrolls %>%
group_by(yearID) %>%
summarize(low_Pay = min(payroll))
quart1_Pay <- Payrolls %>%
group_by(yearID) %>%
summarize(quart1_Pay = quantile(payroll,0.25))
mid_Pay <- Payrolls %>%
group_by(yearID) %>%
summarize(mid_Pay = median(payroll))
quart3_Pay <- Payrolls %>%
group_by(yearID) %>%
summarize(quart3_Pay = quantile(payroll,0.75))
max_Pay <- Payrolls %>%
group_by(yearID) %>%
summarize(max_Pay = max(payroll))
## add quartile lines to the base plot:
## first create function for repetition
Pay4Gold_plot <- Pay4Gold_plot +
geom_line(data = low_Pay, aes(x = yearID, y = low_Pay,
color = "green")) +
geom_line(data = quart1_Pay, aes(x = yearID, y = quart1_Pay,
color = "green")) +
geom_line(data = mid_Pay, aes(x = yearID, y = mid_Pay,
color = "green"), size = 1.5) +
geom_line(data = quart3_Pay, aes(x = yearID, y = quart3_Pay,
color = "green")) +
geom_line(data = max_Pay, aes(x = yearID, y = max_Pay,
color = "green")) +
theme_dark()
Pay4Gold_plot  +
theme(axis.ticks.x = element_line(color = "black"))
library(dplyr)
library(ggplot2)
CopyPlot_Gold <- ggplot(Payrolls, aes(yearID, payroll)) +
##geom_point(shape = 18) +
stat_quantile(quantiles = c(0.25,0.5,0.75)) +
labs(title = "MLB Payrolls", x = "Season",
y = "Payroll in Millions") +
geom_point(data = Payrolls %>%
filter(WSWin == "Y"), color = "blue")
CopyPlot_Gold
## Measures of Spread practice, using Teams table from Sean Lahman MLB Database ##
library(dplyr)
library(ggplot2)
library(tidyverse)
library(Lahman)
search()
data("Teams")
str(Teams)
colnames(Teams)
## Let's have some fun looking at regular season
## wins in the 20th century so far (not 2020 season, COVID)
RegWins <- Teams %>%
filter(yearID >= 2000, yearID <= 2021, yearID != 2020) %>%
mutate(WinPct = round(W/G,3)) %>%
select(yearID, lgID, franchID, W, WinPct)
head(RegWins)
## Minimum Wins
MinWins <- min(RegWins$W)
## Max wins
MaxWins <- max(RegWins$W)
## Mean wins
MeanWins <- mean(RegWins$W)
## Variance of Wins
VarWins <- var(RegWins$W)
## SD of Wins
SdWins <- sqrt(var(RegWins$W))
## SD distances from mean
negSD1 <- MeanWins - SdWins
negSD2 <- MeanWins - 2*SdWins
negSD3 <- MeanWins - 3*SdWins
posSD1 <- MeanWins + SdWins
posSD2 <- MeanWins + 2*SdWins
posSD3 <- MeanWins + 3*SdWins
## MAD: mean absolute deviation
distances <- RegWins$W - mean(RegWins$W)
MadWins <- mean(abs(distances))
## ---------- Let's figure out some Outliers ----------- ##
## create IQR function
IQR <- function(x) {
quantile(x,0.75) - quantile(x,0.25)
}
## use IQR function
IQR_Wins <- IQR(RegWins$W)
IQR_Wins
## lowerthreshold
lowThresh_Wins <- quantile(RegWins$W,0.25) - 1.5*IQR_Wins
highThresh_Wins <- quantile(RegWins$W,0.75) - 1.5*IQR_Wins
##create Outliers function
Outliers_Func <- function(x) {
(x < (quantile(x,0.25) - (1.5*IQR(x)))) | (x > (quantile(x,0.75) + (1.5*IQR(x))))
}
RegWinsOutliers <- !Outliers_Func(RegWins$W)
RegWins$W[53]
summary(RegWins$W)
rm(Outliers_Func)
Winsplus_Outliers <- cbind(RegWins,RegWinsOutliers)
Winsplus_Outliers
## rename last column
Winsplus_Outliers <- rename(Winsplus_Outliers, Outlier = RegWinsOutliers)
## Create filtered 21st century DF, only outliers
Century21_Outliers <- Winsplus_Outliers %>%
filter(Outlier == TRUE)
Century21_Outliers %>% filter(franchID == "SEA")
## ---------------------------------------------------- ##
## JOIN RegWins with Teams using left_join, analyse WS Champs ##
WsChamps <- RegWins %>%
left_join(Teams, by = c("yearID","franchID"),
suffix = c("_first","_second")) %>%
select(yearID,lgID_first,franchID,W_first,WinPct,WSWin)
colnames(WsChamps) <- c("yearID","lgID","franchID","W","WinPct","WSWin")
WsChamps
ggplot(WsChamps, aes(yearID,W)) +
geom_point() +
geom_point(filter(W == max(W)), color = "red")
## Measures of Spread practice, using Teams table from Sean Lahman MLB Database ##
library(dplyr)
library(ggplot2)
library(tidyverse)
library(Lahman)
search()
data("Teams")
str(Teams)
colnames(Teams)
## Let's have some fun looking at regular season
## wins in the 20th century so far (not 2020 season, COVID)
RegWins <- Teams %>%
filter(yearID >= 2000, yearID <= 2021, yearID != 2020) %>%
mutate(WinPct = round(W/G,3)) %>%
select(yearID, lgID, franchID, W, WinPct)
head(RegWins)
## Minimum Wins
MinWins <- min(RegWins$W)
## Max wins
MaxWins <- max(RegWins$W)
## Mean wins
MeanWins <- mean(RegWins$W)
## Variance of Wins
VarWins <- var(RegWins$W)
## SD of Wins
SdWins <- sqrt(var(RegWins$W))
## SD distances from mean
negSD1 <- MeanWins - SdWins
negSD2 <- MeanWins - 2*SdWins
negSD3 <- MeanWins - 3*SdWins
posSD1 <- MeanWins + SdWins
posSD2 <- MeanWins + 2*SdWins
posSD3 <- MeanWins + 3*SdWins
## MAD: mean absolute deviation
distances <- RegWins$W - mean(RegWins$W)
MadWins <- mean(abs(distances))
## ---------- Let's figure out some Outliers ----------- ##
## create IQR function
IQR <- function(x) {
quantile(x,0.75) - quantile(x,0.25)
}
## use IQR function
IQR_Wins <- IQR(RegWins$W)
IQR_Wins
## lowerthreshold
lowThresh_Wins <- quantile(RegWins$W,0.25) - 1.5*IQR_Wins
highThresh_Wins <- quantile(RegWins$W,0.75) - 1.5*IQR_Wins
##create Outliers function
Outliers_Func <- function(x) {
(x < (quantile(x,0.25) - (1.5*IQR(x)))) | (x > (quantile(x,0.75) + (1.5*IQR(x))))
}
RegWinsOutliers <- !Outliers_Func(RegWins$W)
RegWins$W[53]
summary(RegWins$W)
rm(Outliers_Func)
Winsplus_Outliers <- cbind(RegWins,RegWinsOutliers)
Winsplus_Outliers
## rename last column
Winsplus_Outliers <- rename(Winsplus_Outliers, Outlier = RegWinsOutliers)
## Create filtered 21st century DF, only outliers
Century21_Outliers <- Winsplus_Outliers %>%
filter(Outlier == TRUE)
Century21_Outliers %>% filter(franchID == "SEA")
## ---------------------------------------------------- ##
## JOIN RegWins with Teams using left_join, analyse WS Champs ##
WsChamps <- RegWins %>%
left_join(Teams, by = c("yearID","franchID"),
suffix = c("_first","_second")) %>%
select(yearID,lgID_first,franchID,W_first,WinPct,WSWin)
colnames(WsChamps) <- c("yearID","lgID","franchID","W","WinPct","WSWin")
WsChamps
View(WsChamps)
